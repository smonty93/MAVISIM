{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Documentation for MAVISIM \u00b6 MAVISIM is a Python tool to simulate images generated by the MCAO Assisted Visible Imager and Spectrograph (MAVIS) instrument. MAVIS is an instrument being designed for ESO's VLT AOF (Adaptive Optics Facility, UT4 Yepun) with plans to go on-sky ~2027. For more information on MAVIS visit this link. If you use MAVISIM please cite Monty et al. 2021. Current Version: 1.0 \u00b6 MAVISIM 1.0 is optimised to explore the astrometric capabilities of MAVIS. Specifically, it utilises a Fourier approximation of the MAVIS PSF to simulate a monochromatic image of point sources. Capabilities Simulate a full stellar field with built-in PSF spatial variability Optimised for astrometric studies Models three major sources of astrometric error introduced by the AO system with full user control over each: Field variable tip-tilt residuals originating from uncorrected low-order aberrations (dependent on the natural guide star constellation brightness and geometry) Field variable high-order aberrations originating from the laser guide star constellation and characteristics Static field distortion originating from the adaptive optics module Limitations Monochromatic images only Only compatible with an analytical approximate model of the MAVIS PSF using the Fourier method Point source input catalogues only Dev Versions: 1.1 and 1.2 \u00b6 Which Version is Right for Me? Version 1.0 is designed to give the user the most control over tuning each astrometric error term. Subsequent versions utilising an end-to-end PSF provide more accuracy regarding the PSF but are less tunable. If your aim is to explore the impact of astrometric error terms easily, 1.0 is the version for you, if photometry is your goal checkout versions 1.1 and 1.2 when they're released. If you're not sure which version has what you need, here is a comparison of the current version with the planned upgrades in future versions. Version PSF Source PSF Field Variability Wavelength Coverage Scientific Sources User Control 1.0 Fourier Approximation Yes Monochromatic - see PSF database for options Point sources only High 1.1 End-to-end Yes Monochromatic - see PSF database for options Point sources only Intermediate 1.2 dev End-to-end Yes Broadband - see filter and PSF database for options Point sources only Intermediate 2.0 End-to-end Yes Broadband - see filter and PSF database for options Extended objects T.B.D.","title":"Welcome to the Documentation for MAVISIM"},{"location":"#welcome_to_the_documentation_for_mavisim","text":"MAVISIM is a Python tool to simulate images generated by the MCAO Assisted Visible Imager and Spectrograph (MAVIS) instrument. MAVIS is an instrument being designed for ESO's VLT AOF (Adaptive Optics Facility, UT4 Yepun) with plans to go on-sky ~2027. For more information on MAVIS visit this link. If you use MAVISIM please cite Monty et al. 2021.","title":"Welcome to the Documentation for MAVISIM"},{"location":"#current_version_10","text":"MAVISIM 1.0 is optimised to explore the astrometric capabilities of MAVIS. Specifically, it utilises a Fourier approximation of the MAVIS PSF to simulate a monochromatic image of point sources. Capabilities Simulate a full stellar field with built-in PSF spatial variability Optimised for astrometric studies Models three major sources of astrometric error introduced by the AO system with full user control over each: Field variable tip-tilt residuals originating from uncorrected low-order aberrations (dependent on the natural guide star constellation brightness and geometry) Field variable high-order aberrations originating from the laser guide star constellation and characteristics Static field distortion originating from the adaptive optics module Limitations Monochromatic images only Only compatible with an analytical approximate model of the MAVIS PSF using the Fourier method Point source input catalogues only","title":"Current Version: 1.0"},{"location":"#dev_versions_11_and_12","text":"Which Version is Right for Me? Version 1.0 is designed to give the user the most control over tuning each astrometric error term. Subsequent versions utilising an end-to-end PSF provide more accuracy regarding the PSF but are less tunable. If your aim is to explore the impact of astrometric error terms easily, 1.0 is the version for you, if photometry is your goal checkout versions 1.1 and 1.2 when they're released. If you're not sure which version has what you need, here is a comparison of the current version with the planned upgrades in future versions. Version PSF Source PSF Field Variability Wavelength Coverage Scientific Sources User Control 1.0 Fourier Approximation Yes Monochromatic - see PSF database for options Point sources only High 1.1 End-to-end Yes Monochromatic - see PSF database for options Point sources only Intermediate 1.2 dev End-to-end Yes Broadband - see filter and PSF database for options Point sources only Intermediate 2.0 End-to-end Yes Broadband - see filter and PSF database for options Extended objects T.B.D.","title":"Dev Versions: 1.1 and 1.2"},{"location":"install/","text":"Installation \u00b6 MAVISIM is not currently uploaded to the Python Package Index and thus is not yet pip installable. To install MAVISIM 1.0 please download the main branch. The following are some simple ways to include the package. Include ideas for how to link to mavisim? Dependencies \u00b6 MAVISIM 1.0 relies on the following packages: Package Version Numpy Fourier Approximation Astropy End-to-end PSF End-to-end PSF 2.0 End-to-end PSF","title":"Installation"},{"location":"install/#installation","text":"MAVISIM is not currently uploaded to the Python Package Index and thus is not yet pip installable. To install MAVISIM 1.0 please download the main branch. The following are some simple ways to include the package. Include ideas for how to link to mavisim?","title":"Installation"},{"location":"install/#dependencies","text":"MAVISIM 1.0 relies on the following packages: Package Version Numpy Fourier Approximation Astropy End-to-end PSF End-to-end PSF 2.0 End-to-end PSF","title":"Dependencies"},{"location":"runningmavisim/","text":"Running MAVISIM 1.0: The Long Version \u00b6 Version 1.0 of MAVISIM is designed primarily to explore astrometric science cases as was done in Monty et al. 2021 (link paper). This is reflected in the functionality with many different options for the user to control the astrometric error terms. As such, we will go through the main classes, or objects, in MAVISIM 1.0 to help the user understand how to control each error term and grasp the basics of each component of the code. Parameter File \u00b6 The parameter file primarily contains hardcoded instrument, telescope, detector and sky background characteristics. It's not neccesary to change most of them. However, there are a few parameters at the beginning of the file that allow the user to control the simulation output. These are as follows; path_to_mavisim : full path to the location of the mavisim directory path_to_data : full path to the location of the mavisim data files (e.g. the PSF database) input_file : name of the input source catalogue (e.g. nbody file) fv_psf_path : name of the PSF database (assuming it's stored in the data directory) filter : the closest broad band filter to the simulation wavelength (recall Version 1.0 is monochromatic), choices are UBVRI psf_wavelength : PSF database wavelength static_psf : name of the preferred PSF to use for the static PSF case (no field variability) tt_residual_map : name of the tip-tilt residual map to use for the spatially variable tip-tilt case tt_kernel : FWHM in mas of a user-specified tip-tilt kernel Input File \u00b6 MAVISIM 1.0 can only parse an input list of point sources at this time (stay tuned for MAVISIM 2.0 to test extended object science cases). The input file is parsed as a Astropy Table and must contain the following columns. Columns with essential information are bolded. We have provided two example catalogues on GitHub in the /example directory to test MAVISIM. Column Units Description Star n/a Not essential (can set to 0) - helps track the stars across multiple epochs during proper motions studies RA degrees Not essential (can set to 0) - helps with deprojection effects if desired Dec degrees Not essential (can set to 0) - helps with deprojection effects if desired X arcseconds X-distance from the centre of the field set as (0\", 0\") PM_X mas/year Not essential (can set to 0) - can be projected or de-projected proper motion Y arcseconds Y-distance from the centre of the field set as (0\", 0\") PM_Y mas/year Not essential (can set to 0) - can be projected or de-projected proper motion Flux photons/s Used to scale the Gaussian representation of each star, multipled by the exposure time for final flux Loading the input catalogue and specifying the exposure time >>> glob_clust = input_par.input_file >>> exp_time = 30 Source Class \u00b6 This where the user can specify the bulk of the astrometric error terms along with the exposure time. Both the tip-tilt residual errors associated with the natural guide star constellation and static distortion introduced by the MAVIS optics are tuned in this object. The remaining high-order PSF spatial variability is dealt with in the AOGaussGrid object. The Source class handles all the user specifications and returns a source object that is used in tandem with the MAVIS Fourier PSF to create the final image. The user has the option to change the following keywords: static_dist , stat_amp , tt_var , user_tt and tt_amp . The following is a description of each keyword, including the default values. static_dist controls whether static distortion from the MAVIS optics is included (= True ) in the simulation or not (= False ). The distortion is included as a shift in the (x, y) position of the centroid of each star. A provisional distortion map from the MAVIS optical design is used to generate a map of the distortion across the field. This is used to recover the specific (x, y) distortion for each star. Note that MAVISIM deals with sub-pixel shifts. Default value is False . stat_amp controls the magnitude of the static distortion. Change this value to increase the distortion by a scalar in both the x- and y-direction. Default value is 1.0 (no amplification) tt_var controls whether the spatial variability of the tip-tilt residual error is included (= True ) or not (= False ). A map of the spatial dependency of the tip-tilt residual error (expressed as a multivariate Gaussian) is used to extract the tip-tilt for each star. MAVISIM 1.0 comes with three tip-tilt residual maps created using different natural guide star constellations and characteristics. The choice of map is specified in the input_parameters file. Default value is False . user_tt specifies whether the user would like fix the tip-tilt residual error as a specific value described by a single Gaussian kernel. This option only works when the tip-tilt residual is static ( tt_var=False ). The user specifies the value of the residual in the input_parameter file as the tt_kernel parameter. The tt_kernel is assumed to be the FWHM of the tip-tilt residual kernel in units of milli-arcseconds. By default MAVISIM 1.0 includes a charge diffusion and vibrational term in the creation of the tip-tilt residual error, if this option is used these terms will be neglected. Default value is False . tt_amp controls the magnitude of the tip-tilt residual error. Change this value to scale the tip-tilt residual error by some fixed amount. If this value is set to 0, only the charge diffusion and vibrational terms will be included in the determination of the tip-tilt residual. Default value is 1.0 (no amplification) Creating a source object with the default built-in static distortion and tip-tilt residual errors >>> source = Source(input_par, glob_clust, exp_time, static_dist=True, tt_var=True).main() AOGaussGrid Class \u00b6 This is where a unique PSF is created for each star and placed into a 40 arcsecond array in preperation for creating the final image. The user controls whether the high-order PSF is spatially variable or not through the keyword fv_psf . The spatially variability of the PSF is a major characteristic of MCAO images. To create each star-specific PSF, the positional information in the source object is used to recover the closest four PSFs from a grid of 11 x 11 MAVIS Fourier PSFs sampling the science field of view. The four PSFs are then interpolated using a bilinear interpolation to create the final high-order PSF for each star. The high-order PSF is then convolved with the multivariate Gaussian for each star stored in the source object to capture the terms described in the previous section. The AOGaussGrid class returns two things, i) a 40 arcsecond array of stars represented by unique PSFs truncated at the AO control radius ao_field and ii) a 40 arcsecond array of multivariate Gaussians capturing the tip-tilt and static distortion information only, the gauss_field . If you have no interest in the information contained in the seeing wings, you could work with the ao_field only. Creating an image with a spatially variable high-order PSF >>> (ao_field, gauss_field) = AOGaussGrid(input_par, source, fv_psf=True).main() SeeingGrid Class \u00b6 The SeeingGrid class creates a complementary field to the ao_field by convolving the grid of multivariate Gaussians gauss_field created by AOGaussGrid with a single, large Fourier PSF. Before convolving the two, the information within the AO control radius of the large Fourier PSF is removed and the edges are ramped to avoid discontinuities. This is primarily a speed-saving measure to reduce the time required for convolusions, something that becomes significant in crowded fields. If you examine the seeing_field you'll see a stellar field composed only of seeing wings with dark centres. Creating a noise-free image >>> image = ao_field + seeing_field Creating the Final Image: Adding Detector Characteristics and Sky Background \u00b6 The add_all_noise function handles adding noise and sky background to the image as well as converting from photons to ADU. Sky background is added first, system throughput is then accounted for then shot (Poisson) noise and read (Gaussian) noise is added to the noise-free image ( ao_field + seeing_field ). The final image (+noise) is converted first to electrons accounting for the detector quantum efficiency then to ADU assuming a detector gain and saturation point. Saturated stars are capped. The final image (+noise) is larger than the actual MAVIS science field of view and must be trimmed down to simulate the 4k x 4k detector. The image is initially larger by input_par.buffer arcseconds to capture the effects of stray light from stars outside the MAVIS field. This is done in an effort to be more realistic. The trim_image function is then used to trim the final image to the correct size. It can also be used to trim a catalogue of the input source positions if desired (see the next section). Creating the final image >>> final_image = add_all_noise(input_par, image, source.meta[\"exp_time\"]) Stacking Images To simulate a stacked image simply loop this function, a unique noise profile will be added every time. Be wary of RAM though! These arrays are large. Optional Class: InputCoo \u00b6 This is an optional class that can be used to format an input catalogue of source positions (in pixels) to feed to a photometric software. This catalogue can be used to perform forced photometry for example. Thus far it has been tested on DAOPhot-IV (Stetson 1987, 1994). The final output catalogue is: Star Flux RA Dec CCD_Mapped_X CCD_Mapped_PM_X X Static Dist X CCD_Mapped_Y CCD_Mapped_PM_Y Y Static Dist Y .. photons degrees degrees pixels pixels arcseconds pixels pixels pixels arcseconds pixels Creating a catalogue of the input source positions >>> input_coo = InputCoo(input_par, source).main()","title":"Running MAVISIM 1.0: The Long Version"},{"location":"runningmavisim/#running_mavisim_10_the_long_version","text":"Version 1.0 of MAVISIM is designed primarily to explore astrometric science cases as was done in Monty et al. 2021 (link paper). This is reflected in the functionality with many different options for the user to control the astrometric error terms. As such, we will go through the main classes, or objects, in MAVISIM 1.0 to help the user understand how to control each error term and grasp the basics of each component of the code.","title":"Running MAVISIM 1.0: The Long Version"},{"location":"runningmavisim/#parameter_file","text":"The parameter file primarily contains hardcoded instrument, telescope, detector and sky background characteristics. It's not neccesary to change most of them. However, there are a few parameters at the beginning of the file that allow the user to control the simulation output. These are as follows; path_to_mavisim : full path to the location of the mavisim directory path_to_data : full path to the location of the mavisim data files (e.g. the PSF database) input_file : name of the input source catalogue (e.g. nbody file) fv_psf_path : name of the PSF database (assuming it's stored in the data directory) filter : the closest broad band filter to the simulation wavelength (recall Version 1.0 is monochromatic), choices are UBVRI psf_wavelength : PSF database wavelength static_psf : name of the preferred PSF to use for the static PSF case (no field variability) tt_residual_map : name of the tip-tilt residual map to use for the spatially variable tip-tilt case tt_kernel : FWHM in mas of a user-specified tip-tilt kernel","title":"Parameter File"},{"location":"runningmavisim/#input_file","text":"MAVISIM 1.0 can only parse an input list of point sources at this time (stay tuned for MAVISIM 2.0 to test extended object science cases). The input file is parsed as a Astropy Table and must contain the following columns. Columns with essential information are bolded. We have provided two example catalogues on GitHub in the /example directory to test MAVISIM. Column Units Description Star n/a Not essential (can set to 0) - helps track the stars across multiple epochs during proper motions studies RA degrees Not essential (can set to 0) - helps with deprojection effects if desired Dec degrees Not essential (can set to 0) - helps with deprojection effects if desired X arcseconds X-distance from the centre of the field set as (0\", 0\") PM_X mas/year Not essential (can set to 0) - can be projected or de-projected proper motion Y arcseconds Y-distance from the centre of the field set as (0\", 0\") PM_Y mas/year Not essential (can set to 0) - can be projected or de-projected proper motion Flux photons/s Used to scale the Gaussian representation of each star, multipled by the exposure time for final flux Loading the input catalogue and specifying the exposure time >>> glob_clust = input_par.input_file >>> exp_time = 30","title":"Input File"},{"location":"runningmavisim/#source_class","text":"This where the user can specify the bulk of the astrometric error terms along with the exposure time. Both the tip-tilt residual errors associated with the natural guide star constellation and static distortion introduced by the MAVIS optics are tuned in this object. The remaining high-order PSF spatial variability is dealt with in the AOGaussGrid object. The Source class handles all the user specifications and returns a source object that is used in tandem with the MAVIS Fourier PSF to create the final image. The user has the option to change the following keywords: static_dist , stat_amp , tt_var , user_tt and tt_amp . The following is a description of each keyword, including the default values. static_dist controls whether static distortion from the MAVIS optics is included (= True ) in the simulation or not (= False ). The distortion is included as a shift in the (x, y) position of the centroid of each star. A provisional distortion map from the MAVIS optical design is used to generate a map of the distortion across the field. This is used to recover the specific (x, y) distortion for each star. Note that MAVISIM deals with sub-pixel shifts. Default value is False . stat_amp controls the magnitude of the static distortion. Change this value to increase the distortion by a scalar in both the x- and y-direction. Default value is 1.0 (no amplification) tt_var controls whether the spatial variability of the tip-tilt residual error is included (= True ) or not (= False ). A map of the spatial dependency of the tip-tilt residual error (expressed as a multivariate Gaussian) is used to extract the tip-tilt for each star. MAVISIM 1.0 comes with three tip-tilt residual maps created using different natural guide star constellations and characteristics. The choice of map is specified in the input_parameters file. Default value is False . user_tt specifies whether the user would like fix the tip-tilt residual error as a specific value described by a single Gaussian kernel. This option only works when the tip-tilt residual is static ( tt_var=False ). The user specifies the value of the residual in the input_parameter file as the tt_kernel parameter. The tt_kernel is assumed to be the FWHM of the tip-tilt residual kernel in units of milli-arcseconds. By default MAVISIM 1.0 includes a charge diffusion and vibrational term in the creation of the tip-tilt residual error, if this option is used these terms will be neglected. Default value is False . tt_amp controls the magnitude of the tip-tilt residual error. Change this value to scale the tip-tilt residual error by some fixed amount. If this value is set to 0, only the charge diffusion and vibrational terms will be included in the determination of the tip-tilt residual. Default value is 1.0 (no amplification) Creating a source object with the default built-in static distortion and tip-tilt residual errors >>> source = Source(input_par, glob_clust, exp_time, static_dist=True, tt_var=True).main()","title":"Source Class"},{"location":"runningmavisim/#aogaussgrid_class","text":"This is where a unique PSF is created for each star and placed into a 40 arcsecond array in preperation for creating the final image. The user controls whether the high-order PSF is spatially variable or not through the keyword fv_psf . The spatially variability of the PSF is a major characteristic of MCAO images. To create each star-specific PSF, the positional information in the source object is used to recover the closest four PSFs from a grid of 11 x 11 MAVIS Fourier PSFs sampling the science field of view. The four PSFs are then interpolated using a bilinear interpolation to create the final high-order PSF for each star. The high-order PSF is then convolved with the multivariate Gaussian for each star stored in the source object to capture the terms described in the previous section. The AOGaussGrid class returns two things, i) a 40 arcsecond array of stars represented by unique PSFs truncated at the AO control radius ao_field and ii) a 40 arcsecond array of multivariate Gaussians capturing the tip-tilt and static distortion information only, the gauss_field . If you have no interest in the information contained in the seeing wings, you could work with the ao_field only. Creating an image with a spatially variable high-order PSF >>> (ao_field, gauss_field) = AOGaussGrid(input_par, source, fv_psf=True).main()","title":"AOGaussGrid Class"},{"location":"runningmavisim/#seeinggrid_class","text":"The SeeingGrid class creates a complementary field to the ao_field by convolving the grid of multivariate Gaussians gauss_field created by AOGaussGrid with a single, large Fourier PSF. Before convolving the two, the information within the AO control radius of the large Fourier PSF is removed and the edges are ramped to avoid discontinuities. This is primarily a speed-saving measure to reduce the time required for convolusions, something that becomes significant in crowded fields. If you examine the seeing_field you'll see a stellar field composed only of seeing wings with dark centres. Creating a noise-free image >>> image = ao_field + seeing_field","title":"SeeingGrid Class"},{"location":"runningmavisim/#creating_the_final_image_adding_detector_characteristics_and_sky_background","text":"The add_all_noise function handles adding noise and sky background to the image as well as converting from photons to ADU. Sky background is added first, system throughput is then accounted for then shot (Poisson) noise and read (Gaussian) noise is added to the noise-free image ( ao_field + seeing_field ). The final image (+noise) is converted first to electrons accounting for the detector quantum efficiency then to ADU assuming a detector gain and saturation point. Saturated stars are capped. The final image (+noise) is larger than the actual MAVIS science field of view and must be trimmed down to simulate the 4k x 4k detector. The image is initially larger by input_par.buffer arcseconds to capture the effects of stray light from stars outside the MAVIS field. This is done in an effort to be more realistic. The trim_image function is then used to trim the final image to the correct size. It can also be used to trim a catalogue of the input source positions if desired (see the next section). Creating the final image >>> final_image = add_all_noise(input_par, image, source.meta[\"exp_time\"]) Stacking Images To simulate a stacked image simply loop this function, a unique noise profile will be added every time. Be wary of RAM though! These arrays are large.","title":"Creating the Final Image: Adding Detector Characteristics and Sky Background"},{"location":"runningmavisim/#optional_class_inputcoo","text":"This is an optional class that can be used to format an input catalogue of source positions (in pixels) to feed to a photometric software. This catalogue can be used to perform forced photometry for example. Thus far it has been tested on DAOPhot-IV (Stetson 1987, 1994). The final output catalogue is: Star Flux RA Dec CCD_Mapped_X CCD_Mapped_PM_X X Static Dist X CCD_Mapped_Y CCD_Mapped_PM_Y Y Static Dist Y .. photons degrees degrees pixels pixels arcseconds pixels pixels pixels arcseconds pixels Creating a catalogue of the input source positions >>> input_coo = InputCoo(input_par, source).main()","title":"Optional Class: InputCoo"},{"location":"runningmavisimshort/","text":"Running MAVISIM 1.0: The Short Version \u00b6 Specifications \u00b6 To create an image of a point source catalogue with the default settings, only a subset of settings must be specified. In the input_parameter.py file please edit the following: path_to_mavisim : full path to the location of the mavisim directory path_to_data : full path to the location of the mavisim data files (e.g. the PSF database) input_file : name of the input source catalogue (e.g. nbody file) fv_psf_path : name of the PSF database (assuming it's stored in the data directory) filter : the closest broad band filter to the simulation wavelength (recall Version 1.0 is monochromatic), choices are UBVRI psf_wavelength : PSF database wavelength static_psf : name of the preferred PSF to use for the static PSF case (no field variability) tt_residual_map : name of the tip-tilt residual map to use for the spatially variable tip-tilt case tt_kernel : FWHM in mas of a user-specified tip-tilt kernel The other settings to specify are made when calling the Source and AOGaussGrid classes. These are as follows: In the Source class: static_dist controls whether static distortion from the MAVIS optics is included (= True ) in the simulation or not (= False ). Default value is False . stat_amp controls the magnitude of the static distortion. Change this value to increase the distortion by a scalar in both the x- and y-direction. Default value is 1.0 (no amplification) tt_var controls whether the spatial variability of the tip-tilt residual error is included (= True ) or not (= False ). The choice of map is specified in the input_parameters file. Default value is False . user_tt specifies whether the user would like fix the tip-tilt residual error as a specific value described by a single Gaussian kernel. This option only works when the tip-tilt residual is static ( tt_var=False ). The user specifies the value of the residual in the input_parameter file as the tt_kernel parameter. Default value is False . tt_amp controls the magnitude of the tip-tilt residual error. Default value is 1.0 (no amplification) In the AOGaussGrid class: fv_psf controls whether the high-order PSF is spatially variable or not. This is one of the main characteristics that makes MCAO images unique. Commands to Create an Image \u00b6 The following set of commands will create a MAVISIM image. These can also be found in the /example directory on the MAVISIM Github repository. Creating a MAVISIM image # Imports >>> import mavisim.input_parameters as input_par >>> from mavisim.Source import Source >>> from mavisim.AOGaussGrid import AOGaussGrid >>> from mavisim.SeeingGrid import SeeingGrid >>> from mavisim.addnoise import add_all_noise # Load the input source file >>> glob_clust = input_par.input_file >>> exp_time = 30 # seconds # Create the Source object with default static distortion and spatially variable tip-tilt error >>> source = Source(input_par, glob_clust, exp_time, static_dist=True, tt_var=True).main() # Create the AOGrid and GaussGrid objects with a spatially variable high-order PSF >>> (ao_field, gauss_field) = AOGaussGrid(input_par, source, fv_psf=True).main() # Create a Noise-Free Image >> image = ao_field + seeing_field # Create the Final Image >> final_image = add_all_noise(input_par, image, source.meta[\"exp_time\"]) # Optional: Create an Astropy Table of the Input Positions >> input_coo = InputCoo(input_par, source, trim_cat=True).main() A fits file can be created using the data from the final image.","title":"Running MAVISIM 1.0: The Short Version"},{"location":"runningmavisimshort/#running_mavisim_10_the_short_version","text":"","title":"Running MAVISIM 1.0: The Short Version"},{"location":"runningmavisimshort/#specifications","text":"To create an image of a point source catalogue with the default settings, only a subset of settings must be specified. In the input_parameter.py file please edit the following: path_to_mavisim : full path to the location of the mavisim directory path_to_data : full path to the location of the mavisim data files (e.g. the PSF database) input_file : name of the input source catalogue (e.g. nbody file) fv_psf_path : name of the PSF database (assuming it's stored in the data directory) filter : the closest broad band filter to the simulation wavelength (recall Version 1.0 is monochromatic), choices are UBVRI psf_wavelength : PSF database wavelength static_psf : name of the preferred PSF to use for the static PSF case (no field variability) tt_residual_map : name of the tip-tilt residual map to use for the spatially variable tip-tilt case tt_kernel : FWHM in mas of a user-specified tip-tilt kernel The other settings to specify are made when calling the Source and AOGaussGrid classes. These are as follows: In the Source class: static_dist controls whether static distortion from the MAVIS optics is included (= True ) in the simulation or not (= False ). Default value is False . stat_amp controls the magnitude of the static distortion. Change this value to increase the distortion by a scalar in both the x- and y-direction. Default value is 1.0 (no amplification) tt_var controls whether the spatial variability of the tip-tilt residual error is included (= True ) or not (= False ). The choice of map is specified in the input_parameters file. Default value is False . user_tt specifies whether the user would like fix the tip-tilt residual error as a specific value described by a single Gaussian kernel. This option only works when the tip-tilt residual is static ( tt_var=False ). The user specifies the value of the residual in the input_parameter file as the tt_kernel parameter. Default value is False . tt_amp controls the magnitude of the tip-tilt residual error. Default value is 1.0 (no amplification) In the AOGaussGrid class: fv_psf controls whether the high-order PSF is spatially variable or not. This is one of the main characteristics that makes MCAO images unique.","title":"Specifications"},{"location":"runningmavisimshort/#commands_to_create_an_image","text":"The following set of commands will create a MAVISIM image. These can also be found in the /example directory on the MAVISIM Github repository. Creating a MAVISIM image # Imports >>> import mavisim.input_parameters as input_par >>> from mavisim.Source import Source >>> from mavisim.AOGaussGrid import AOGaussGrid >>> from mavisim.SeeingGrid import SeeingGrid >>> from mavisim.addnoise import add_all_noise # Load the input source file >>> glob_clust = input_par.input_file >>> exp_time = 30 # seconds # Create the Source object with default static distortion and spatially variable tip-tilt error >>> source = Source(input_par, glob_clust, exp_time, static_dist=True, tt_var=True).main() # Create the AOGrid and GaussGrid objects with a spatially variable high-order PSF >>> (ao_field, gauss_field) = AOGaussGrid(input_par, source, fv_psf=True).main() # Create a Noise-Free Image >> image = ao_field + seeing_field # Create the Final Image >> final_image = add_all_noise(input_par, image, source.meta[\"exp_time\"]) # Optional: Create an Astropy Table of the Input Positions >> input_coo = InputCoo(input_par, source, trim_cat=True).main() A fits file can be created using the data from the final image.","title":"Commands to Create an Image"}]}